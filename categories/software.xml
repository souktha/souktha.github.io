<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Soukthavy Sopha (software)</title><link>http://souktha.github.io/</link><description></description><atom:link rel="self" href="http://souktha.github.io/categories/software.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 16 Jan 2017 00:47:55 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Zynq SPI slave stepper motor driver</title><link>http://souktha.github.io/software/zynq_spi_stepper_sw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;The Linux SPI slave device driver is to enable user access to SPI slave stepper motor FPGA design in my other post
&lt;a class="reference external" href="http://souktha.github.io/hardware/zybo-spi-stepper"&gt;http://souktha.github.io/hardware/zybo-spi-stepper&lt;/a&gt; . This is the software part of that implementation on the Zybo Zynq7000.
I reuse the original SPI slave I wrote earlier and expand its functionality a little bit more so that I can send
the step count to the stepper motor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/zynq_spi_stepper_sw/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/zynq_spi_stepper_sw/</guid><pubDate>Thu, 17 Nov 2016 00:40:47 GMT</pubDate></item><item><title>Zynq Zybo SPI slave via EMIO</title><link>http://souktha.github.io/hardware/zybo-spi-slave/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;I would like to add a simple IO peripheral device to the Zynq Zybo board and I would like to learn how much
effort I need to get PS-PL interconnected and can be used by high level OS such as Linux.
For this exercise, I choose to create a simplest device for the Zynq PL that interface with its PS. My choice
is to create a SPI slave device (PL) that will interconnect to the SPI master of the Zynq (PS).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/zybo-spi-slave/"&gt;Read more…&lt;/a&gt; (15 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>software</category><guid>http://souktha.github.io/hardware/zybo-spi-slave/</guid><pubDate>Sun, 17 Jul 2016 18:10:54 GMT</pubDate></item><item><title>Adding PCIe support and bring up the boot splash screen to DM814x U-Boot</title><link>http://souktha.github.io/software/dm814x_pcie/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;It is desirable to have some visual feedback to user during system boot up process especially if the system takes more
than few seconds to boot. For the Linux based set-top box that boot to the main GUI menu may take considerable
amount of time depending on the number of processes it needs to start. Some system may need to program the FPGA bitmask,
bring up the networking processes or bring up some externally connected devices. These steps add up to the total system boot up
time. For system with video support, it is a good practice to have video up as soon as possible so that the user
would know that the system is working and it is in the process of booting up the system. This is commonly known as
putting the boot splash screen during boot process.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/dm814x_pcie/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/dm814x_pcie/</guid><pubDate>Sat, 11 Jun 2016 22:18:26 GMT</pubDate></item><item><title>Adding SATA HD boot support to DM814x U-Boot</title><link>http://souktha.github.io/software/dm814x_sata/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;TI DM814x/AM287x evaluation platform (TI8148 EVM) can boot from various connected devices depending on the setting
of the BTMode[4-0] pins as described in chapter 4.5.2.1 of its respective technical reference manual [&lt;a class="reference internal" href="http://souktha.github.io/software/dm814x_sata/#id1"&gt;1&lt;/a&gt;]. Typically
the EVM boot its first stage of u-boot as the minimum boot loaders. TI calls it &lt;em&gt;min-nand&lt;/em&gt; boot loader
configuration. This minimum boot then bootstraps a secondary boot phase which is a
a full featured u-boot for this platform.
The EV platform has SATA H/W support where I will bring up the SATA HDD in the second phase of booting so that I can load the
Linux kernel image from HDD instead of loading it from NAND device.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/dm814x_sata/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/dm814x_sata/</guid><pubDate>Mon, 09 May 2016 20:13:36 GMT</pubDate></item><item><title>Decoupling Xilinx Zynq PS and PL on Linux for Digilent Zybo</title><link>http://souktha.github.io/software/zybo-quickstart/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Digilent Zybo board is built around Xilinx Zynq-7000 family [&lt;a class="reference internal" href="http://souktha.github.io/software/zybo-quickstart/#id1"&gt;1&lt;/a&gt;]. This Zynq-7000 is integrated with a dual-core
ARM Cortex-A9 processor that has Linux support for it. In addition to this PS unit, the Xilinx 7-series
FPGA is also integrated as the PL component of this SoC [&lt;a class="reference internal" href="http://souktha.github.io/software/zybo-quickstart/#id2"&gt;2&lt;/a&gt;]. This demonstation will show how easy it is
to decouple PS and PL components.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/zybo-quickstart/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>software</category><guid>http://souktha.github.io/software/zybo-quickstart/</guid><pubDate>Sat, 23 Apr 2016 19:08:20 GMT</pubDate></item><item><title>Creating an IR receiver on AM335x BeagleBone Black</title><link>http://souktha.github.io/software/bblk-ir/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;What I like about working with TI based platform is their easily accessible documentations. It is by far the most
developers friendly unlike other chip vendors. This accessibility has enable me to experiment with the on-chip I/O
subsystem components.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/bblk-ir/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/bblk-ir/</guid><pubDate>Sat, 02 Apr 2016 15:39:02 GMT</pubDate></item><item><title>Redirect tty login from ssh to UART port</title><link>http://souktha.github.io/software/tty2comport/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div class="section" id="objective"&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;When I ssh from remote host machine to my local machine, say from outside place to host machine at home, I would
like to directly access a device that is connected by serial console to my local machine, for example, a beaglebone black
board that is connected to my home PC serial console ttyUSB0. I implemented a simple console server for this purpose.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/tty2comport/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/tty2comport/</guid><pubDate>Fri, 18 Mar 2016 03:15:48 GMT</pubDate></item></channel></rss>