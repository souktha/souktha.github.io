<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soukthavy Sopha (Posts about latex)</title><link>http://souktha.github.io/</link><description></description><atom:link href="http://souktha.github.io/categories/latex.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 23 Jan 2021 17:49:16 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>RS(n,k) code HDL implementation</title><link>http://souktha.github.io/hardware/rs15_7_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on &lt;a class="reference external" href="http://souktha.github.io/misc/RS15_7_5"&gt;RS code workout&lt;/a&gt;
where I did some math workout on the RS forward-error-correcting code (FEC). I find
it to be simple enough to implement it in verilog that can eventually be synthesized for FPGA.
I choose the simplest algorithm to implement the RS (15,9,7) as outlined in my last post.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/rs15_7_hw/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><guid>http://souktha.github.io/hardware/rs15_7_hw/</guid><pubDate>Sat, 06 May 2017 14:47:03 GMT</pubDate></item><item><title>RS(n,k) code for burst error-correction work out </title><link>http://souktha.github.io/misc/RS15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of
another class of BCH code. The math workout of my earlier blog of a binary BCH code of
&lt;span class="math"&gt;\((n,k,d)=(15,7,5)\)&lt;/span&gt; is applicable to this class of code, the RS code
which is the non-binary version of BCH code. It will be based on the same
primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; as the last exercise.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/RS15_7_5/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/RS15_7_5/</guid><pubDate>Sat, 22 Apr 2017 22:46:19 GMT</pubDate></item><item><title>Implementing BCH (15,7,5) FEC</title><link>http://souktha.github.io/hardware/bch15_7_5_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on &lt;a class="reference external" href="http://souktha.github.io/misc/bch15_7_5"&gt;Binary BCH (15,7,5) workout&lt;/a&gt;
where I did some math workout on the BCH forward-error-correcting code (FEC). I find
it to be simple enough to implement it in verilog that can eventually be synthesized for FPGA.
I choose the simplest algorithm for decoding the binary BCH (15,7,5) as outlined in my last post.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/bch15_7_5_hw/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><guid>http://souktha.github.io/hardware/bch15_7_5_hw/</guid><pubDate>Sat, 18 Mar 2017 00:17:42 GMT</pubDate></item><item><title>Binary BCH (15,7,5) work out </title><link>http://souktha.github.io/misc/bch15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of forward
error correction code (FEC). Build on my earlier blog of a Hamming cyclic code of
&lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt;, I will expand its capability to a binary
BCH &lt;span class="math"&gt;\((15,7,5), t=2\)&lt;/span&gt;  code based on the same primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch15_7_5/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/bch15_7_5/</guid><pubDate>Sun, 26 Feb 2017 22:46:19 GMT</pubDate></item><item><title>Binary BCH (31,16,7) linear cyclic code work out</title><link>http://souktha.github.io/misc/bch31_16_7/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Building on my previous post on the simple Hamming linear cyclic code, I decide to push on for a little bit
more usefull class of cyclic code, the BCH code. This will not be based on the same generator polynomial,
&lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; using the powers of &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; as worked out in the last post since it is only
a &lt;span class="math"&gt;\(t=1\)&lt;/span&gt; FEC. While it is possible to achieve &lt;span class="math"&gt;\(t &amp;gt; 1\)&lt;/span&gt;, but it comes with the expense
of information bits. For this workout problem I choose higher degree primitive polynomial.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch31_16_7/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/bch31_16_7/</guid><pubDate>Mon, 16 Jan 2017 23:39:17 GMT</pubDate></item><item><title>Simple Cyclic Hamming (15,11,3) FEC</title><link>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on &lt;a class="reference external" href="http://souktha.github.io/misc/cyclic_1_x_x4"&gt;simple cyclic Hamming code&lt;/a&gt;
where I did some math workout on this type of forward error-correction code (FEC). I am doing
it for fun since I think it is simple enough to implement it in FPGA. The generator
for this exercise is &lt;span class="math"&gt;\(g(x)=1+x+x4\)&lt;/span&gt; for an &lt;span class="math"&gt;\((n,k,d) \equiv (15,11,3)\)&lt;/span&gt; code.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/cyclic_1_x_x4_hw/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><guid>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</guid><pubDate>Thu, 22 Dec 2016 00:17:42 GMT</pubDate></item><item><title>Simple Cyclic Hamming codes</title><link>http://souktha.github.io/misc/cyclic_1_x_x4/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that accompanied my FPGA implementation of forward error correction code (FEC). I choose to
make a simple implementation of &lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt; code using the primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.
This FEC will have be able to correct 1 bit error based on its minimum distance of 3. It is simple because it can be worked
out by hand and it would not take too long to implement in hardware.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/cyclic_1_x_x4/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/cyclic_1_x_x4/</guid><pubDate>Sat, 10 Dec 2016 22:46:19 GMT</pubDate></item><item><title>LaTeX conversion</title><link>http://souktha.github.io/misc/class_report_503/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div class="section" id="convert-a-small-latex-file-to-mathjax-supported-format"&gt;
&lt;h2&gt;&lt;span class="sectnum"&gt;1&lt;/span&gt; Convert a small LaTeX file to mathjax supported format&lt;/h2&gt;
&lt;!-- Converting my old LaTeX file to reST format requires a bit of editing. Unless I did something wrong, cut-n-paste mode is not working, for example, I cannot get this to work, --&gt;
&lt;!-- .. code-block:: --&gt;
&lt;!-- .. raw: latex --&gt;
&lt;!-- \begin{equation} --&gt;
&lt;!-- \phi(y_j,x_i)  = \frac{p(x_i|y_j)p(y_j)}{\sum_{k=1}^{n}p(x_i|y_k)p(y_k)} --&gt;
&lt;!-- \end{equation} --&gt;
&lt;!-- instead, --&gt;
&lt;!-- .. code-block:: --&gt;
&lt;!-- .. math:: --&gt;
&lt;!-- \phi(y_j,x_i)  = \frac{p(x_i|y_j)p(y_j)}{\sum_{k=1}^{n}p(x_i|y_k)p(y_k)} --&gt;
&lt;!-- works. Most of editing involves deleting and indenting. Later I will figure out how to do multi columns in IEEE format. --&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;Author&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Soukthavy Sopha&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Contact&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="mailto:soukthavy@yahoo.com"&gt;soukthavy@yahoo.com&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;organization&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;self&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;status&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Lean to convert the LaTex of IEEE format to reST using my old class homework.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;revision&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;0.1&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;copyright&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;None&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;abstract&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The Arimoto-Blahut algorithm is the algorithm used to solve the convex optimization problem
for the maximum capacity of a discrete memoryless channel. We will implement their algorithm with
MATLAB script to solve the given problem.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/class_report_503/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/class_report_503/</guid><pubDate>Sun, 06 Mar 2016 15:56:21 GMT</pubDate></item></channel></rss>