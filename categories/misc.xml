<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soukthavy Sopha (Posts about misc)</title><link>http://souktha.github.io/</link><description></description><atom:link href="http://souktha.github.io/categories/misc.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 23 Jan 2021 17:49:16 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>RS(n,k) code for burst error-correction work out </title><link>http://souktha.github.io/misc/RS15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of
another class of BCH code. The math workout of my earlier blog of a binary BCH code of
&lt;span class="math"&gt;\((n,k,d)=(15,7,5)\)&lt;/span&gt; is applicable to this class of code, the RS code
which is the non-binary version of BCH code. It will be based on the same
primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; as the last exercise.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/RS15_7_5/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/RS15_7_5/</guid><pubDate>Sat, 22 Apr 2017 22:46:19 GMT</pubDate></item><item><title>Binary BCH (15,7,5) work out </title><link>http://souktha.github.io/misc/bch15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of forward
error correction code (FEC). Build on my earlier blog of a Hamming cyclic code of
&lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt;, I will expand its capability to a binary
BCH &lt;span class="math"&gt;\((15,7,5), t=2\)&lt;/span&gt;  code based on the same primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch15_7_5/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/bch15_7_5/</guid><pubDate>Sun, 26 Feb 2017 22:46:19 GMT</pubDate></item><item><title>Binary BCH (31,16,7) linear cyclic code work out</title><link>http://souktha.github.io/misc/bch31_16_7/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Building on my previous post on the simple Hamming linear cyclic code, I decide to push on for a little bit
more usefull class of cyclic code, the BCH code. This will not be based on the same generator polynomial,
&lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; using the powers of &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; as worked out in the last post since it is only
a &lt;span class="math"&gt;\(t=1\)&lt;/span&gt; FEC. While it is possible to achieve &lt;span class="math"&gt;\(t &amp;gt; 1\)&lt;/span&gt;, but it comes with the expense
of information bits. For this workout problem I choose higher degree primitive polynomial.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch31_16_7/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/bch31_16_7/</guid><pubDate>Mon, 16 Jan 2017 23:39:17 GMT</pubDate></item><item><title>Create Wireless AP on Linux PC in 10 minutes</title><link>http://souktha.github.io/misc/create-ap-linuxpc/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Creating a wireless access point aka WiFi AP is relatively easy. A typical PC
usually has at least one networking device or maybe two. One would be an Ethernet
device while the other would be a WiFi device. If the ethernet device is tethered
into the router already, this leaves WiFi device unused as in my case. Instead of
leaving it in a useless state, I choose to create a WiFi AP out of it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/create-ap-linuxpc/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/create-ap-linuxpc/</guid><pubDate>Sun, 15 Jan 2017 19:14:05 GMT</pubDate></item><item><title>Simple Cyclic Hamming codes</title><link>http://souktha.github.io/misc/cyclic_1_x_x4/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that accompanied my FPGA implementation of forward error correction code (FEC). I choose to
make a simple implementation of &lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt; code using the primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.
This FEC will have be able to correct 1 bit error based on its minimum distance of 3. It is simple because it can be worked
out by hand and it would not take too long to implement in hardware.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/cyclic_1_x_x4/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/cyclic_1_x_x4/</guid><pubDate>Sat, 10 Dec 2016 22:46:19 GMT</pubDate></item><item><title>UBI block and read-only NAND FS</title><link>http://souktha.github.io/misc/squashfs-ubi/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;There are many NAND Flash file systems available in Linux distribution that are suitable for deployment
in various Linux embedded products. Every FS has their strengths and weeknesses and they are not
perfect for every type of applications. The debate will be endless as to which is better than the others.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/squashfs-ubi/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/squashfs-ubi/</guid><pubDate>Sat, 09 Apr 2016 01:44:47 GMT</pubDate></item><item><title>Repartitioning 4GB Beaglebone Black eMMC flash</title><link>http://souktha.github.io/misc/repartition-boneblk/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;!-- $LastChangeDate$ --&gt;
&lt;!-- $Rev$ --&gt;
&lt;!-- $Author$ --&gt;
&lt;p&gt;I bought the Beaglebone Black Rev C nearly two years ago. When I received it, I powered it up and
saw that everything appeared to be functional, put it back in the box and never had the chance
to work with it again until now. It looks like it was preloaded with Debian (I am not sure). There
must have been a lot of updates ever since.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/repartition-boneblk/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/repartition-boneblk/</guid><pubDate>Sun, 20 Mar 2016 01:26:53 GMT</pubDate></item><item><title>LaTeX conversion</title><link>http://souktha.github.io/misc/class_report_503/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div class="section" id="convert-a-small-latex-file-to-mathjax-supported-format"&gt;
&lt;h2&gt;&lt;span class="sectnum"&gt;1&lt;/span&gt; Convert a small LaTeX file to mathjax supported format&lt;/h2&gt;
&lt;!-- Converting my old LaTeX file to reST format requires a bit of editing. Unless I did something wrong, cut-n-paste mode is not working, for example, I cannot get this to work, --&gt;
&lt;!-- .. code-block:: --&gt;
&lt;!-- .. raw: latex --&gt;
&lt;!-- \begin{equation} --&gt;
&lt;!-- \phi(y_j,x_i)  = \frac{p(x_i|y_j)p(y_j)}{\sum_{k=1}^{n}p(x_i|y_k)p(y_k)} --&gt;
&lt;!-- \end{equation} --&gt;
&lt;!-- instead, --&gt;
&lt;!-- .. code-block:: --&gt;
&lt;!-- .. math:: --&gt;
&lt;!-- \phi(y_j,x_i)  = \frac{p(x_i|y_j)p(y_j)}{\sum_{k=1}^{n}p(x_i|y_k)p(y_k)} --&gt;
&lt;!-- works. Most of editing involves deleting and indenting. Later I will figure out how to do multi columns in IEEE format. --&gt;
&lt;dl class="field-list simple"&gt;
&lt;dt&gt;Author&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Soukthavy Sopha&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Contact&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class="reference external" href="mailto:soukthavy@yahoo.com"&gt;soukthavy@yahoo.com&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;organization&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;self&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;status&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Lean to convert the LaTex of IEEE format to reST using my old class homework.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;revision&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;0.1&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;copyright&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;None&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;abstract&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The Arimoto-Blahut algorithm is the algorithm used to solve the convex optimization problem
for the maximum capacity of a discrete memoryless channel. We will implement their algorithm with
MATLAB script to solve the given problem.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/class_report_503/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/class_report_503/</guid><pubDate>Sun, 06 Mar 2016 15:56:21 GMT</pubDate></item><item><title>ReStructuredText Demo (import from demo.txt)</title><link>http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;!-- This is a comment. Note how any initial comments are moved by
transforms to after the document title, subtitle, and docinfo. --&gt;
&lt;div class="section" id="restructuredtext-demonstration"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/#id27"&gt;&lt;span class="sectnum"&gt;1&lt;/span&gt; reStructuredText Demonstration&lt;/a&gt;&lt;/h2&gt;
&lt;!-- Above is the document title, and below is the subtitle.
They are transformed from section titles after parsing. --&gt;
&lt;div class="section" id="examples-of-syntax-constructs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/#id28"&gt;&lt;span class="sectnum"&gt;1.1&lt;/span&gt; Examples of Syntax Constructs&lt;/a&gt;&lt;/h3&gt;
&lt;!-- bibliographic fields (which also require a transform): --&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/</guid><pubDate>Fri, 04 Mar 2016 22:47:22 GMT</pubDate></item></channel></rss>