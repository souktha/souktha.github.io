<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soukthavy Sopha (Posts about math)</title><link>http://souktha.github.io/</link><description></description><atom:link rel="self" href="http://souktha.github.io/categories/cat_math.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 04 Jun 2017 00:28:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>RS(n,k) code for burst error-correction work out</title><link>http://souktha.github.io/misc/RS15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of
another class of BCH code. The math workout of my earlier blog of a binary BCH code of
&lt;span class="math"&gt;\((n,k,d)=(15,7,5)\)&lt;/span&gt; is applicable to this class of code, the RS code
which is the non-binary version of BCH code. It will be based on the same
primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; as the last exercise.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/RS15_7_5/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>mathjax</category><category>misc</category><guid>http://souktha.github.io/misc/RS15_7_5/</guid><pubDate>Sat, 22 Apr 2017 22:46:19 GMT</pubDate></item><item><title>Binary BCH (15,7,5) work out</title><link>http://souktha.github.io/misc/bch15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of forward
error correction code (FEC). Build on my earlier blog of a Hamming cyclic code of
&lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt;, I will expand its capability to a binary
BCH &lt;span class="math"&gt;\((15,7,5), t=2\)&lt;/span&gt;  code based on the same primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch15_7_5/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>mathjax</category><category>misc</category><guid>http://souktha.github.io/misc/bch15_7_5/</guid><pubDate>Sun, 26 Feb 2017 22:46:19 GMT</pubDate></item><item><title>Simple Cyclic Hamming codes</title><link>http://souktha.github.io/misc/cyclic_1_x_x4/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that accompanied my FPGA implementation of forward error correction code (FEC). I choose to
make a simple implementation of &lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt; code using the primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.
This FEC will have be able to correct 1 bit error based on its minimum distance of 3. It is simple because it can be worked
out by hand and it would not take too long to implement in hardware.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/cyclic_1_x_x4/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>mathjax</category><category>misc</category><guid>http://souktha.github.io/misc/cyclic_1_x_x4/</guid><pubDate>Sat, 10 Dec 2016 22:46:19 GMT</pubDate></item></channel></rss>