<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Soukthavy Sopha (hardware)</title><link>http://souktha.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://souktha.github.io/categories/hardware.xml"></atom:link><language>en</language><lastBuildDate>Mon, 26 Dec 2016 23:09:02 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Simple Cyclic Hamming (15,11,3) FEC</title><link>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on "simple cyclic Hamming code"__&lt;/p&gt;
&lt;p&gt;where I did some math workout on this type of forward error-correction code (FEC). I am doing
it for fun since I think it is simple enough to implement it in FPGA. The generator
for this exercise is &lt;span class="math"&gt;\(g(x)=1+x+x4\)&lt;/span&gt; for an &lt;span class="math"&gt;\((n,k,d) \equiv (15,11,3)\)&lt;/span&gt; code.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/cyclic_1_x_x4_hw/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><category>mathjax</category><guid>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</guid><pubDate>Thu, 22 Dec 2016 00:17:42 GMT</pubDate></item><item><title>SPI slave stepper motor with Zybo</title><link>http://souktha.github.io/hardware/zybo-spi-stepper/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;My previous blog was to create the SPI slave device on Programmable Logic (PL) side of the Zynq7000 where it
can be interconnected and can be accessible by the Processing System (PS) side of this SoC and I achieved the
result I expected. Since that blog was only for validating my SPI slave design to be coherent with the rest of the
system without doing much useful work, I would like to extend it so that I can make it do a bit more useful work.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/zybo-spi-stepper/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/zybo-spi-stepper/</guid><pubDate>Sat, 12 Nov 2016 15:38:09 GMT</pubDate></item><item><title>Zynq Zybo SPI slave via EMIO</title><link>http://souktha.github.io/hardware/zybo-spi-slave/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;I would like to add a simple IO peripheral device to the Zynq Zybo board and I would like to learn how much
effort I need to get PS-PL interconnected and can be used by high level OS such as Linux.
For this exercise, I choose to create a simplest device for the Zynq PL that interface with its PS. My choice
is to create a SPI slave device (PL) that will interconnect to the SPI master of the Zynq (PS).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/zybo-spi-slave/"&gt;Read more…&lt;/a&gt; (15 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>software</category><guid>http://souktha.github.io/hardware/zybo-spi-slave/</guid><pubDate>Sun, 17 Jul 2016 18:10:54 GMT</pubDate></item><item><title>Decoupling Xilinx Zynq PS and PL on Linux for Digilent Zybo</title><link>http://souktha.github.io/software/zybo-quickstart/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Digilent Zybo board is built around Xilinx Zynq-7000 family [&lt;a class="reference internal" href="http://souktha.github.io/software/zybo-quickstart/#id1"&gt;1&lt;/a&gt;]. This Zynq-7000 is integrated with a dual-core
ARM Cortex-A9 processor that has Linux support for it. In addition to this PS unit, the Xilinx 7-series
FPGA is also integrated as the PL component of this SoC [&lt;a class="reference internal" href="http://souktha.github.io/software/zybo-quickstart/#id2"&gt;2&lt;/a&gt;]. This demonstation will show how easy it is
to decouple PS and PL components.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/zybo-quickstart/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>software</category><guid>http://souktha.github.io/software/zybo-quickstart/</guid><pubDate>Sat, 23 Apr 2016 19:08:20 GMT</pubDate></item><item><title>Displaying Xilinx XADC on VGA</title><link>http://souktha.github.io/hardware/vga-display-xadc/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;My previous blog was about displaying simple bar graph on a standard VGA &lt;a class="reference external" href="mailto:640x480@60HZ"&gt;640x480@60HZ&lt;/a&gt; monitor using synthesized Verilog code.
This blog is to follow on with that exercise, but using the actual sampled data from the Xilinx XADC instead.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/vga-display-xadc/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/vga-display-xadc/</guid><pubDate>Sun, 03 Apr 2016 21:10:14 GMT</pubDate></item><item><title>Run-length encoding with FPGA</title><link>http://souktha.github.io/hardware/runlenth/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Run-length encoding is one simple encoding, if not the simplest form of data compression. The more repetition in the
data stream the better it is. For example, if input data stream is 'A2.A2.C1.C2.B4.B4.B4.B4.B4.B4.B4.B4' the output
would be '02.A2.01.C1.01.C2.08.B4'. If there are 258 bytes of B4, then output would be '...FF.B4.03.B4'.
In this experiment I simulated the flow of data stream and the encoding with verilog on the Nexys4DDR board, but first
I should specify the specification of the implementation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/runlenth/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/runlenth/</guid><pubDate>Sat, 26 Mar 2016 18:40:58 GMT</pubDate></item><item><title>Drawing bargraph on VGA with Nexys4DDR</title><link>http://souktha.github.io/hardware/vga_draw_graph/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;!-- $Author: ssop $ --&gt;
&lt;!-- $LastChangeDate$ --&gt;
&lt;!-- $Rev$ --&gt;
&lt;p&gt;The Digilent Nexys4DDR has only one video port which is a VGA port. With a small set of verilog code, I can synthesize a simple circuit to
draw some bar graph having each line with a width of one pixel. To achieve this I need to create the HSYNC and VSYNC for the
desired output of &lt;a class="reference external" href="mailto:640x480@60HZ"&gt;640x480@60HZ&lt;/a&gt;.
The standard VGA of 640x480 is meant for its displayable area while it actually has 800x525 of total area. This makes the
required pixel clock frequency of 800 * 60 * 525 = 25.200MHZ.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/vga_draw_graph/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/vga_draw_graph/</guid><pubDate>Sat, 19 Mar 2016 19:52:20 GMT</pubDate></item><item><title>servo driver</title><link>http://souktha.github.io/hardware/servo/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Servo motor is an electromechanical drive that is relatively simple to operate. A
typically servo motor has relatively few movements, namely left, right and center.
Controlling its movement is to send the periodic pulse width of about 1.5ms, 1ms or 2ms for
the center, left, and the right movement respectively.
In this demo, I use a very simple verilog code to control its movement.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/servo/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/servo/</guid><pubDate>Sat, 12 Mar 2016 05:25:40 GMT</pubDate></item></channel></rss>