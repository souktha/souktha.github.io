<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soukthavy Sopha</title><link>http://souktha.github.io/</link><description>Demo site</description><atom:link href="http://souktha.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 27 Mar 2016 04:13:47 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Run-length encoding with FPGA</title><link>http://souktha.github.io/hardware/runlenth/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Run-length encoding is one simple encoding, if not the simplest form of data compression. The more repetition in the
data stream the better it is. For example, if input data stream is 'A2.A2.C1.C2.B4.B4.B4.B4.B4.B4.B4.B4' the output
would be '02.A2.01.C1.01.C2.08.B4'. If there are 258 bytes of B4, then output would be '...FF.B4.03.B4'.
In this experiment I simulated the flow of data stream and the encoding with verilog on the Nexys4DDR board, but first
I should specify the specification of the implementation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/runlenth/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/runlenth/</guid><pubDate>Sat, 26 Mar 2016 18:40:58 GMT</pubDate></item><item><title>Repartitioning 4GB Beaglebone Black eMMC flash</title><link>http://souktha.github.io/misc/repartition-boneblk/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;!-- $LastChangeDate$ --&gt;
&lt;!-- $Rev$ --&gt;
&lt;!-- $Author$ --&gt;
&lt;p&gt;I bought the Beaglebone Black Rev C nearly two years ago. When I received it, I powered it up and
saw that everything appeared to be functional, put it back in the box and never had the chance
to work with it again until now. It looks like it was preloaded with Debian (I am not sure). There
must have been a lot of updates ever since.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/repartition-boneblk/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/repartition-boneblk/</guid><pubDate>Sun, 20 Mar 2016 01:26:53 GMT</pubDate></item><item><title>Drawing bargraph on VGA with Nexys4DDR</title><link>http://souktha.github.io/hardware/vga_draw_graph/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;!-- $Author: ssop $ --&gt;
&lt;!-- $LastChangeDate$ --&gt;
&lt;!-- $Rev$ --&gt;
&lt;p&gt;The Digilent Nexys4DDR has only one video port which is a VGA port. With a small set of verilog code, I can synthesize a simple circuit to
draw some bar graph having each line with a width of one pixel. To achieve this I need to create the HSYNC and VSYNC for the
desired output of &lt;a class="reference external" href="mailto:640x480@60HZ"&gt;640x480@60HZ&lt;/a&gt;.
The standard VGA of 640x480 is meant for its displayable area while it actually has 800x525 of total area. This makes the
required pixel clock frequency of 800 * 60 * 525 = 25.200MHZ.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/vga_draw_graph/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/vga_draw_graph/</guid><pubDate>Sat, 19 Mar 2016 19:52:20 GMT</pubDate></item><item><title>Redirect tty login from ssh to UART port</title><link>http://souktha.github.io/software/tty2comport/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div class="section" id="objective"&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;When I ssh from remote host machine to my local machine, say from outside place to host machine at home, I would
like to directly access a device that is connected by serial console to my local machine, for example, a beaglebone black
board that is connected to my home PC serial console ttyUSB0. I implemented a simple console server for this purpose.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/tty2comport/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/tty2comport/</guid><pubDate>Fri, 18 Mar 2016 03:15:48 GMT</pubDate></item><item><title>servo driver</title><link>http://souktha.github.io/hardware/servo/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Servo motor is an electromechanical drive that is relatively simple to operate. A
typically servo motor has relatively few movements, namely left, right and center.
Controlling its movement is to send the periodic pulse width of about 1.5ms, 1ms or 2ms for
the center, left, and the right movement respectively.
In this demo, I use a very simple verilog code to control its movement.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/servo/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/servo/</guid><pubDate>Sat, 12 Mar 2016 05:25:40 GMT</pubDate></item><item><title>LaTeX conversion</title><link>http://souktha.github.io/misc/class_report_503/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;table class="docinfo" frame="void" rules="none"&gt;
&lt;col class="docinfo-name"&gt;
&lt;col class="docinfo-content"&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Author:&lt;/th&gt;
&lt;td&gt;Soukthavy Sopha&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Contact:&lt;/th&gt;
&lt;td&gt;&lt;a class="first last reference external" href="mailto:soukthavy@yahoo.com"&gt;soukthavy@yahoo.com&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Organization:&lt;/th&gt;
&lt;td&gt;self&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Status:&lt;/th&gt;
&lt;td&gt;Lean to convert the LaTex of IEEE format to reST using my old class homework.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Revision:&lt;/th&gt;
&lt;td&gt;0.1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Copyright:&lt;/th&gt;
&lt;td&gt;None&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="abstract topic"&gt;
&lt;p class="topic-title first"&gt;Abstract&lt;/p&gt;
&lt;p&gt;The Arimoto-Blahut algorithm is the algorithm used to solve the convex optimization problem
for the maximum capacity of a discrete memoryless channel. We will implement their algorithm with
MATLAB script to solve the given problem.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- Converting my old LaTeX file to reST format requires a bit of editing. Unless I did something wrong, cut-n-paste mode is not working, for example, I cannot get this to work, --&gt;
&lt;!-- .. code-block:: --&gt;
&lt;!-- .. raw: latex --&gt;
&lt;!-- \begin{equation} --&gt;
&lt;!-- \phi(y_j,x_i)  = \frac{p(x_i|y_j)p(y_j)}{\sum_{k=1}^{n}p(x_i|y_k)p(y_k)} --&gt;
&lt;!-- \end{equation} --&gt;
&lt;!-- instead, --&gt;
&lt;!-- .. code-block:: --&gt;
&lt;!-- .. math:: --&gt;
&lt;!-- \phi(y_j,x_i)  = \frac{p(x_i|y_j)p(y_j)}{\sum_{k=1}^{n}p(x_i|y_k)p(y_k)} --&gt;
&lt;!-- works. Most of editing involves deleting and indenting. Later I will figure out how to do multi columns in IEEE format. --&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/class_report_503/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>mathjax</category><category>misc</category><guid>http://souktha.github.io/misc/class_report_503/</guid><pubDate>Sun, 06 Mar 2016 15:56:21 GMT</pubDate></item><item><title>ReStructuredText Demo (import from demo.txt)</title><link>http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;table class="docinfo" frame="void" rules="none"&gt;
&lt;col class="docinfo-name"&gt;
&lt;col class="docinfo-content"&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Author:&lt;/th&gt;
&lt;td&gt;David Goodger&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Address:&lt;/th&gt;
&lt;td&gt;&lt;pre class="address"&gt;
123 Example Street
Example, EX  Canada
A1B 2C3
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Contact:&lt;/th&gt;
&lt;td&gt;&lt;a class="first last reference external" href="mailto:docutils-develop@lists.sourceforge.net"&gt;docutils-develop@lists.sourceforge.net&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Authors:&lt;/th&gt;
&lt;td&gt;Me
&lt;br&gt;Myself
&lt;br&gt;I&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Organization:&lt;/th&gt;
&lt;td&gt;humankind&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Date:&lt;/th&gt;
&lt;td&gt;2012-01-03&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Status:&lt;/th&gt;
&lt;td&gt;This is a "work in progress"&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Revision:&lt;/th&gt;
&lt;td&gt;7302&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Version:&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class="docinfo-name"&gt;Copyright:&lt;/th&gt;
&lt;td&gt;This document has been placed in the public domain. You
may do with it as you wish. You may copy, modify,
redistribute, reattribute, sell, buy, rent, lease,
destroy, or improve it, quote it at length, excerpt,
incorporate, collate, fold, staple, or mutilate it, or do
anything else to it that your or anyone else's heart
desires.&lt;/td&gt;&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="docinfo-name"&gt;field name:&lt;/th&gt;&lt;td class="field-body"&gt;This is a generic bibliographic field.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="docinfo-name"&gt;field name 2:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Generic bibliographic fields may contain multiple body elements.&lt;/p&gt;
&lt;p class="last"&gt;Like this.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="dedication topic"&gt;
&lt;p class="topic-title first"&gt;Dedication&lt;/p&gt;
&lt;p&gt;For Docutils users &amp;amp; co-developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="abstract topic"&gt;
&lt;p class="topic-title first"&gt;Abstract&lt;/p&gt;
&lt;p&gt;This document is a demonstration of the reStructuredText markup
language, containing examples of all basic reStructuredText
constructs and many advanced constructs.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- This is a comment. Note how any initial comments are moved by
transforms to after the document title, subtitle, and docinfo. --&gt;
&lt;!-- Above is the document title, and below is the subtitle.
They are transformed from section titles after parsing. --&gt;
&lt;!-- bibliographic fields (which also require a transform): --&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><category>misc</category><guid>http://souktha.github.io/misc/restructuredtext-demo-import-from-demotxt/</guid><pubDate>Fri, 04 Mar 2016 22:47:22 GMT</pubDate></item></channel></rss>