<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soukthavy Sopha</title><link>http://souktha.github.io/</link><description>Demo site</description><atom:link href="http://souktha.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 25 Nov 2021 23:51:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Custom FreeRTOS port for QEMU RTX</title><link>http://souktha.github.io/software/freertos-port/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is the second part that follows the porting QEMU for the Real-Time Experiment (RTX) ARM R5F core. This part addresses
the porting of FreeRTOS to run on the ported QEMU that I blogged earlier. For porting, I picked the latest
&lt;em&gt;FreeRTOS 10.4.1&lt;/em&gt; at that time. It appears that the versioning of this RTOS has since changed since the later
part of 2020; however this released version is still available for downloading from its hosting site.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/freertos-port/"&gt;Read more…&lt;/a&gt; (15 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/freertos-port/</guid><pubDate>Sun, 21 Nov 2021 13:20:03 GMT</pubDate></item><item><title>Adding a custom ARM platform to QEMU 5.2.0</title><link>http://souktha.github.io/software/qemu-port/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;The SoC is being developed by the ASIC team, but the software team wants to develop the software concurrently
for the hardware that is not yet available, at least not for another 3 months or longer. In this situation what do
you do ?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/qemu-port/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/qemu-port/</guid><pubDate>Sat, 02 Jan 2021 17:19:03 GMT</pubDate></item><item><title>OpenWRT (Chaos Calmer) on Linksys EA8300</title><link>http://souktha.github.io/misc/ea8300-openwrt/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This blog is about installing the OpenWRT firmware into Linksys EA8300 Max-Stream AC200 Tri-Band Wi-Fi router. The firmware is
a customized version of OpenWRT Chaos Calmer for this platform. It serves as an alternative to the proprietary
firmware where one can further customizes it as needed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/ea8300-openwrt/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://souktha.github.io/misc/ea8300-openwrt/</guid><pubDate>Fri, 17 Nov 2017 22:15:05 GMT</pubDate></item><item><title>RS(n,k) code HDL implementation</title><link>http://souktha.github.io/hardware/rs15_7_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on &lt;a class="reference external" href="http://souktha.github.io/misc/RS15_7_5"&gt;RS code workout&lt;/a&gt;
where I did some math workout on the RS forward-error-correcting code (FEC). I find
it to be simple enough to implement it in verilog that can eventually be synthesized for FPGA.
I choose the simplest algorithm to implement the RS (15,9,7) as outlined in my last post.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/rs15_7_hw/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><guid>http://souktha.github.io/hardware/rs15_7_hw/</guid><pubDate>Sat, 06 May 2017 14:47:03 GMT</pubDate></item><item><title>RS(n,k) code for burst error-correction work out </title><link>http://souktha.github.io/misc/RS15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of
another class of BCH code. The math workout of my earlier blog of a binary BCH code of
&lt;span class="math"&gt;\((n,k,d)=(15,7,5)\)&lt;/span&gt; is applicable to this class of code, the RS code
which is the non-binary version of BCH code. It will be based on the same
primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; as the last exercise.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/RS15_7_5/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/RS15_7_5/</guid><pubDate>Sat, 22 Apr 2017 22:46:19 GMT</pubDate></item><item><title>Implementing BCH (15,7,5) FEC</title><link>http://souktha.github.io/hardware/bch15_7_5_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on &lt;a class="reference external" href="http://souktha.github.io/misc/bch15_7_5"&gt;Binary BCH (15,7,5) workout&lt;/a&gt;
where I did some math workout on the BCH forward-error-correcting code (FEC). I find
it to be simple enough to implement it in verilog that can eventually be synthesized for FPGA.
I choose the simplest algorithm for decoding the binary BCH (15,7,5) as outlined in my last post.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/bch15_7_5_hw/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><guid>http://souktha.github.io/hardware/bch15_7_5_hw/</guid><pubDate>Sat, 18 Mar 2017 00:17:42 GMT</pubDate></item><item><title>Binary BCH (15,7,5) work out </title><link>http://souktha.github.io/misc/bch15_7_5/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that is the math part of my FPGA implementation of forward
error correction code (FEC). Build on my earlier blog of a Hamming cyclic code of
&lt;span class="math"&gt;\((n,k,d)=(15,11,3)\)&lt;/span&gt;, I will expand its capability to a binary
BCH &lt;span class="math"&gt;\((15,7,5), t=2\)&lt;/span&gt;  code based on the same primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch15_7_5/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/bch15_7_5/</guid><pubDate>Sun, 26 Feb 2017 22:46:19 GMT</pubDate></item><item><title>Binary BCH (31,16,7) linear cyclic code work out</title><link>http://souktha.github.io/misc/bch31_16_7/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Building on my previous post on the simple Hamming linear cyclic code, I decide to push on for a little bit
more usefull class of cyclic code, the BCH code. This will not be based on the same generator polynomial,
&lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt; using the powers of &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; as worked out in the last post since it is only
a &lt;span class="math"&gt;\(t=1\)&lt;/span&gt; FEC. While it is possible to achieve &lt;span class="math"&gt;\(t &amp;gt; 1\)&lt;/span&gt;, but it comes with the expense
of information bits. For this workout problem I choose higher degree primitive polynomial.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/bch31_16_7/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>misc</category><guid>http://souktha.github.io/misc/bch31_16_7/</guid><pubDate>Mon, 16 Jan 2017 23:39:17 GMT</pubDate></item><item><title>Create Wireless AP on Linux PC in 10 minutes</title><link>http://souktha.github.io/misc/create-ap-linuxpc/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Creating a wireless access point aka WiFi AP is relatively easy. A typical PC
usually has at least one networking device or maybe two. One would be an Ethernet
device while the other would be a WiFi device. If the ethernet device is tethered
into the router already, this leaves WiFi device unused as in my case. Instead of
leaving it in a useless state, I choose to create a WiFi AP out of it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/create-ap-linuxpc/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/create-ap-linuxpc/</guid><pubDate>Sun, 15 Jan 2017 19:14:05 GMT</pubDate></item><item><title>Simple Cyclic Hamming (15,11,3) FEC</title><link>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on &lt;a class="reference external" href="http://souktha.github.io/misc/cyclic_1_x_x4"&gt;simple cyclic Hamming code&lt;/a&gt;
where I did some math workout on this type of forward error-correction code (FEC). I am doing
it for fun since I think it is simple enough to implement it in FPGA. The generator
for this exercise is &lt;span class="math"&gt;\(g(x)=1+x+x4\)&lt;/span&gt; for an &lt;span class="math"&gt;\((n,k,d) \equiv (15,11,3)\)&lt;/span&gt; code.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/cyclic_1_x_x4_hw/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><guid>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</guid><pubDate>Thu, 22 Dec 2016 00:17:42 GMT</pubDate></item></channel></rss>