<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Soukthavy Sopha</title><link>http://souktha.github.io/</link><description>Demo site</description><atom:link type="application/rss+xml" rel="self" href="http://souktha.github.io/rss.xml"></atom:link><language>en</language><lastBuildDate>Mon, 26 Dec 2016 23:09:03 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Simple Cyclic Hamming (15,11,3) FEC</title><link>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is the implementation part of the my post on "simple cyclic Hamming code"__&lt;/p&gt;
&lt;p&gt;where I did some math workout on this type of forward error-correction code (FEC). I am doing
it for fun since I think it is simple enough to implement it in FPGA. The generator
for this exercise is &lt;span class="math"&gt;\(g(x)=1+x+x4\)&lt;/span&gt; for an &lt;span class="math"&gt;\((n,k,d) \equiv (15,11,3)\)&lt;/span&gt; code.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/cyclic_1_x_x4_hw/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>latex</category><category>mathjax</category><guid>http://souktha.github.io/hardware/cyclic_1_x_x4_hw/</guid><pubDate>Thu, 22 Dec 2016 00:17:42 GMT</pubDate></item><item><title>Simple Cyclic Hamming codes</title><link>http://souktha.github.io/misc/cyclic_1_x_x4/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a math workout problem that accompanied my FPGA implementation of forward error correction code (FEC). I choose to
make a simple implementation of &lt;span class="math"&gt;\((n,k,d)=(15,11,1)\)&lt;/span&gt; code using the primitive polynomial &lt;span class="math"&gt;\(h(x)=1+x+x^4\)&lt;/span&gt;.
This FEC will have be able to correct 1 bit error based on its minimum distance of 3. It is simple because it can be worked
out by hand and it would not take too long to implement in hardware.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/cyclic_1_x_x4/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>mathjax</category><category>misc</category><guid>http://souktha.github.io/misc/cyclic_1_x_x4/</guid><pubDate>Sat, 10 Dec 2016 22:46:19 GMT</pubDate></item><item><title>Zynq SPI slave stepper motor driver</title><link>http://souktha.github.io/software/zynq_spi_stepper_sw/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;The Linux SPI slave device driver is to enable user access to SPI slave stepper motor FPGA design in my other post
&lt;a class="reference external" href="http://souktha.github.io/hardware/zybo-spi-stepper"&gt;http://souktha.github.io/hardware/zybo-spi-stepper&lt;/a&gt; . This is the software part of that implementation on the Zybo Zynq7000.
I reuse the original SPI slave I wrote earlier and expand its functionality a little bit more so that I can send
the step count to the stepper motor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/zynq_spi_stepper_sw/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/zynq_spi_stepper_sw/</guid><pubDate>Thu, 17 Nov 2016 00:40:47 GMT</pubDate></item><item><title>SPI slave stepper motor with Zybo</title><link>http://souktha.github.io/hardware/zybo-spi-stepper/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;My previous blog was to create the SPI slave device on Programmable Logic (PL) side of the Zynq7000 where it
can be interconnected and can be accessible by the Processing System (PS) side of this SoC and I achieved the
result I expected. Since that blog was only for validating my SPI slave design to be coherent with the rest of the
system without doing much useful work, I would like to extend it so that I can make it do a bit more useful work.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/zybo-spi-stepper/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/zybo-spi-stepper/</guid><pubDate>Sat, 12 Nov 2016 15:38:09 GMT</pubDate></item><item><title>Zynq Zybo SPI slave via EMIO</title><link>http://souktha.github.io/hardware/zybo-spi-slave/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;I would like to add a simple IO peripheral device to the Zynq Zybo board and I would like to learn how much
effort I need to get PS-PL interconnected and can be used by high level OS such as Linux.
For this exercise, I choose to create a simplest device for the Zynq PL that interface with its PS. My choice
is to create a SPI slave device (PL) that will interconnect to the SPI master of the Zynq (PS).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/zybo-spi-slave/"&gt;Read more…&lt;/a&gt; (15 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>software</category><guid>http://souktha.github.io/hardware/zybo-spi-slave/</guid><pubDate>Sun, 17 Jul 2016 18:10:54 GMT</pubDate></item><item><title>Adding PCIe support and bring up the boot splash screen to DM814x U-Boot</title><link>http://souktha.github.io/software/dm814x_pcie/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;It is desirable to have some visual feedback to user during system boot up process especially if the system takes more
than few seconds to boot. For the Linux based set-top box that boot to the main GUI menu may take considerable
amount of time depending on the number of processes it needs to start. Some system may need to program the FPGA bitmask,
bring up the networking processes or bring up some externally connected devices. These steps add up to the total system boot up
time. For system with video support, it is a good practice to have video up as soon as possible so that the user
would know that the system is working and it is in the process of booting up the system. This is commonly known as
putting the boot splash screen during boot process.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/dm814x_pcie/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/dm814x_pcie/</guid><pubDate>Sat, 11 Jun 2016 22:18:26 GMT</pubDate></item><item><title>Adding SATA HD boot support to DM814x U-Boot</title><link>http://souktha.github.io/software/dm814x_sata/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;TI DM814x/AM287x evaluation platform (TI8148 EVM) can boot from various connected devices depending on the setting
of the BTMode[4-0] pins as described in chapter 4.5.2.1 of its respective technical reference manual [&lt;a class="reference internal" href="http://souktha.github.io/software/dm814x_sata/#id1"&gt;1&lt;/a&gt;]. Typically
the EVM boot its first stage of u-boot as the minimum boot loaders. TI calls it &lt;em&gt;min-nand&lt;/em&gt; boot loader
configuration. This minimum boot then bootstraps a secondary boot phase which is a
a full featured u-boot for this platform.
The EV platform has SATA H/W support where I will bring up the SATA HDD in the second phase of booting so that I can load the
Linux kernel image from HDD instead of loading it from NAND device.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/dm814x_sata/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://souktha.github.io/software/dm814x_sata/</guid><pubDate>Mon, 09 May 2016 20:13:36 GMT</pubDate></item><item><title>Decoupling Xilinx Zynq PS and PL on Linux for Digilent Zybo</title><link>http://souktha.github.io/software/zybo-quickstart/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;Digilent Zybo board is built around Xilinx Zynq-7000 family [&lt;a class="reference internal" href="http://souktha.github.io/software/zybo-quickstart/#id1"&gt;1&lt;/a&gt;]. This Zynq-7000 is integrated with a dual-core
ARM Cortex-A9 processor that has Linux support for it. In addition to this PS unit, the Xilinx 7-series
FPGA is also integrated as the PL component of this SoC [&lt;a class="reference internal" href="http://souktha.github.io/software/zybo-quickstart/#id2"&gt;2&lt;/a&gt;]. This demonstation will show how easy it is
to decouple PS and PL components.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/software/zybo-quickstart/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><category>software</category><guid>http://souktha.github.io/software/zybo-quickstart/</guid><pubDate>Sat, 23 Apr 2016 19:08:20 GMT</pubDate></item><item><title>UBI block and read-only NAND FS</title><link>http://souktha.github.io/misc/squashfs-ubi/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;There are many NAND Flash file systems available in Linux distribution that are suitable for deployment
in various Linux embedded products. Every FS has their strengths and weeknesses and they are not
perfect for every type of applications. The debate will be endless as to which is better than the others.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/misc/squashfs-ubi/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>misc</category><guid>http://souktha.github.io/misc/squashfs-ubi/</guid><pubDate>Sat, 09 Apr 2016 01:44:47 GMT</pubDate></item><item><title>Displaying Xilinx XADC on VGA</title><link>http://souktha.github.io/hardware/vga-display-xadc/</link><dc:creator>Soukthavy</dc:creator><description>&lt;div&gt;&lt;p&gt;My previous blog was about displaying simple bar graph on a standard VGA &lt;a class="reference external" href="mailto:640x480@60HZ"&gt;640x480@60HZ&lt;/a&gt; monitor using synthesized Verilog code.
This blog is to follow on with that exercise, but using the actual sampled data from the Xilinx XADC instead.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://souktha.github.io/hardware/vga-display-xadc/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hardware</category><guid>http://souktha.github.io/hardware/vga-display-xadc/</guid><pubDate>Sun, 03 Apr 2016 21:10:14 GMT</pubDate></item></channel></rss>